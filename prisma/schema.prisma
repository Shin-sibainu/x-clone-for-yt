// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


// ユーザーモデル（Clerkと連携）
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  name          String
  username      String    @unique
  bio           String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // リレーション
  posts         Post[]
  likes         Like[]
  replies       Reply[]
  followers     Follow[]  @relation("followers")
  following     Follow[]  @relation("following")

  @@map("users")
}

// ポストモデル
model Post {
  id          String    @id @default(cuid())
  content     String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  replies     Reply[]

  @@map("posts")
}

// いいねモデル
model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  replyId   String?
  createdAt DateTime @default(now())
  
  // リレーション
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@map("likes")
}

// 返信モデル
model Reply {
  id        String   @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
  replies   Reply[]  @relation("ReplyToReply")
  parentReply Reply? @relation("ReplyToReply", fields: [parentReplyId], references: [id], onDelete: Cascade)
  parentReplyId String?

  @@map("replies")
}

// フォローモデル
model Follow {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  // リレーション
  followerId    String
  followingId   String
  follower      User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following     User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
} 